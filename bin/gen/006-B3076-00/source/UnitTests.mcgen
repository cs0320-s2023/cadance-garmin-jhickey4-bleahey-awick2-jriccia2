import Toybox.Lang;
import Toybox.Test;

(:typecheck(false))
function getTestObject() as RunNoEvil {
    return new RunNoEvil();
}

(:typecheck(false))
class RunNoEvil extends Test.Test {
    private var logger as Logger;
    private var idToName as Array;

    function initialize() {
        Test.Test.initialize();
        logger = new Test.Logger();
        idToName = new [2];
        populate_test_entries_0_to_2();
    }

    function getIndexOf(name as String) as Number {
        if (idToName has :indexOf) {
            return idToName.indexOf(name);
        }

        var j = idToName.size();
        for (var i = 0; i < j; ++i) {
            if (idToName[i].equals(name)) {
                return i;
            }
        }

        return -1;
    }

    function getTestName(id as Number) as String {
        return idToName[id];
    }

    function getNumberOfTests() as Number {
        return idToName.size();
    }

    function populate_test_entries_0_to_2() as Void {
        idToName[0] = "hrToEnergyBasicTest";
        idToName[1] = "hrToEnergyOutOfRange";
    }

    function evaluate_test_entries_0_to_2(id as Number, logger as Logger) {
        var result = false;
        if (id == 0) {
            result = $.hrToEnergyBasicTest(logger);
        } else if (id == 1) {
            result = $.hrToEnergyOutOfRange(logger);
        }

        return result;
    }

    function runTest(test as String or Number) as Boolean {
        var id = test;
        if (test instanceof Lang.String) {
            id = getIndexOf(test);
        }

        assertMessage(id >= 0, "Could not find '" + test + "'");
        var result = false;
        if (id < 2) {
            result = self.evaluate_test_entries_0_to_2(id, logger);
        }

        if (result instanceof Boolean) {
            return result;
        }

        return false;
    }
}